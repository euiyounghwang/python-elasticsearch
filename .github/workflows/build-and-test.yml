
name: Build and Test

# on:
#   workflow_call:
#   push:
#     branches-ignore:  [dev, master]

on:
  push:
    # branches:
    #   - dev
    #   - feature/*
    branches: [dev, master, feature/*, release/*]
  pull_request:
    branches: ['*']
    
    
jobs:
  build-tests:
    name: Build and tests
    runs-on: ubuntu-latest
    env:
      elasticsearch_version: '7.13.0'
      # It's not working to run as daemon
      # elasticsearch_version: '8.8.0'
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_DB: postgres   
          POSTGRES_PASSWORD: ${{ secrets.postgres_password }}
          POSTGRES_USER: postgres
          POSTGRES_HOST_AUTH_METHOD: trust
          PGPORT: 15432
        ports:
          - 15432:15432
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      redis:
        # Docker Hub image
        image: redis
        # Set health checks to wait until redis has started
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Opens tcp port 6379 on the host and service container
          - 6379:6379
    steps:
      - uses: actions/checkout@v3
      
      - name: Install poetry
        id: Build-Poetry
        run: pipx install poetry

      - uses: actions/setup-python@v4
        with:
          python-version: 3.9
          cache: poetry

      - name: Install Python dependencies
        run: poetry install
        
      - name: Configure sysctl limits
        run: |
          sudo swapoff -a
          sudo sysctl -w vm.swappiness=1
          sudo sysctl -w fs.file-max=262144
          sudo sysctl -w vm.max_map_count=262144
          
      - name: Postgres is reachable
        id: Test-Postgres
        run: |
          # for psql
          # sudo apt-get upgrade -y
          sudo apt-get install -y postgresql-client
          # Test psql connection
          PGPASSWORD=${{ secrets.postgres_password }} psql -h localhost -p 15432 -U postgres -d postgres -c "select 1"
        
      - name: Redis is reachable
        id: Test-Redis
        run: |
          sudo apt-get install redis-tools
          redis-cli -h localhost -p 6379 ping
      
      - name: Install Elasticsearch
        id: Install-Elasticsearch
        run: |
          wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-${{ env.elasticsearch_version }}-linux-x86_64.tar.gz
          tar -xzf elasticsearch-${{ env.elasticsearch_version }}-linux-x86_64.tar.gz
          sudo elasticsearch-${{ env.elasticsearch_version }}/bin/elasticsearch-plugin install analysis-stempel;
          sudo elasticsearch-${{ env.elasticsearch_version }}/bin/elasticsearch-plugin install analysis-ukrainian;
          sudo elasticsearch-${{ env.elasticsearch_version }}/bin/elasticsearch-plugin install analysis-smartcn;
          sudo elasticsearch-${{ env.elasticsearch_version }}/bin/elasticsearch-plugin install analysis-phonetic;
          sudo elasticsearch-${{ env.elasticsearch_version }}/bin/elasticsearch-plugin install analysis-icu;
        
      - name: Run Elasticsearch
        id: Run-Elasticsearch
        run: |
          ES_JAVA_OPTS="-Xms1g -Xmx1g" elasticsearch-${{ env.elasticsearch_version }}/bin/elasticsearch -E http.port=9203 -d
          sleep 30
        
      - name: Elasticsearch is reachable
        id: Test-Elasticsearch
        run: |
          curl --verbose --show-error http://localhost:9203
      
                      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        with:
          driver: docker-container     
            
            
      - name: Run tests
        id: Build-tests
        run: poetry run pytest -sv ./tests

      - name: Archive code coverage results
        uses: actions/upload-artifact@v3
        with:
          name: code-coverage-report
          path: htmlcov
          
      - name: Post to a Slack channel
        if: failure()
        uses: act10ns/slack@v1
        with:
          status: ${{ job.status }}
          steps: ${{ toJson(steps) }}
          channel: '#alert'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          

  build-docker:
    name: Build and Push to DockerHub
    if: github.ref == 'refs/heads/master'
    needs: build-tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Docker meta
        id: docker-build
        uses: docker/metadata-action@v4
        with:
          # images: euiyoung/fastapi-docker-github-actions:es
          images: $IMAGE_NAME:es

  #     - name: Login to Docker Hub
  #       if: github.event_name != 'pull_request'
  #       uses: docker/login-action@v2
  #       with:
  #         username: ${{ secrets.DOCKERHUB_USERNAME }}
  #         password: ${{ secrets.DOCKERHUB_TOKEN }}

  #     - name: Build and push Docker image
  #       uses: docker/build-push-action@v4
  #       with:
  #         context: .
  #         push: ${{ github.event_name != 'pull_request' }}
  #         tags: ${{ steps.meta.outputs.tags }}
  #         labels: ${{ steps.meta.outputs.labels }}
  
      - name: Post to a Slack channel
        if: failure()
        uses: act10ns/slack@v1
        with:
          status: ${{ job.status }}
          steps: ${{ toJson(steps) }}
          channel: '#alert'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
    

  alert:
    name: Slack-Alerts
    needs: build-docker
    # if: ${{ github.event.workflow_run.conclusion == 'failure' }}
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Post to a Slack channel
        uses: act10ns/slack@v1
        with:
          status: ${{ job.status }}
          steps: ${{ toJson(steps) }}
          channel: '#alert'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: always()
      

      
